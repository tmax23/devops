---

- fail:
    msg: Unsupported version OS - must be CentOS-8 or RedHat-8
  when: ( ansible_distribution == "CentOS" or ansible_distribution == "RedHat")
        and ansible_distribution_major_version != "8"

- name: Uninstall old Docker
  yum:
    name: "{{ YUM_REMOVE_LIST }}"
    state: absent

- name: Install yum-utils
  yum:
    name: yum-utils
    state: latest
    update_cache: yes

- name: Add docker-ce.repo repository list
  shell:
    cmd: yum-config-manager --add-repo "{{ DOCKER_CE_REPO }}"

- name: Install docker-ce
  yum:
    name: "{{ YUM_INSTALL_LIST }}"
    state: latest
    update_cache: yes

- name: Start and autorun the docker
  ansible.builtin.service:
    name: docker
    state: started
    enabled: yes

- name: Add the "{{ ansible_user }}" to docker group
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes
  notify: Restart docker service

- name: Flush handlers
  meta: flush_handlers

- name: Activating the changes to group docker (reset connection)
  meta: reset_connection

- name: Docker run hello-world container
  become: no
  shell:
    cmd: docker run hello-world
  register: results
  failed_when: "'Hello from Docker!' not in results.stdout"

- name: Get docker-compose
  get_url:
    url: "{{ URL_DOCKER_COMPOSE }}"
    dest: /usr/local/bin/docker-compose
    mode: '0755'

- name: chmod +x docker-compose
  file:
    dest: /usr/local/bin/docker-compose
    mode: a+x

- name: Test docker-compose --version
  become: no
  shell:
    cmd: docker-compose --version
  register: results
  failed_when: "'docker-compose version' not in results.stdout"
#==========================================================
#==========================================================
- name: Compress docker-compose app from local directory
  community.general.archive:
    path: "{{ DOCKER_COMPOSE_APP_DIR }}"
    dest: "{{ THIS_ROLE_FILES_DIR }}/docker-compose.tgz"
    exclude_path:
       - "{{ DOCKER_COMPOSE_APP_DIR }}/mysql/*"
       - "{{ DOCKER_COMPOSE_APP_DIR }}/nginx/log/*"
  delegate_to: localhost
  become: no

- name: Copy docker-compose.tgz to server
  ansible.builtin.copy:
    src: docker-compose.tgz
    dest: "/home/{{ ansible_user }}/docker-compose.tgz"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0666'

- name: Unarchive docker-compose.tgz
  ansible.builtin.unarchive:
    src: "/home/{{ ansible_user }}/docker-compose.tgz"
    dest: "/home/{{ ansible_user }}/"
    remote_src: yes
  become: no

- name: docker-compose up
  become: no
  args:
    chdir: "/home/{{ ansible_user }}/docker-compose/"
  shell:
    cmd: docker-compose up -d
