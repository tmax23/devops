#!/usr/bin/env groovy

pipeline {
  agent any
	environment {
	  IMAGE_NAME = 'tmax23/js-app:latest'
	}

  stages {

    stage('Build app') {
      steps {
        script {
          echo "Building the application is not required"
        }
      }
    }

    stage('Test app') {
      steps {
        script {
          echo "Testing the application is not required"
        }
      }
    }

	  stage('Build docker image') {
      steps {
        script {
          echo "building the docker image"
					dir ('terraform_learning/aws_jenkins') {
            withCredentials([usernamePassword(credentialsId: 'docker-hub-repo', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
              sh "docker build -t ${IMAGE_NAME} ."
              sh "echo $PASS | docker login -u $USER --password-stdin"
              sh "docker push ${IMAGE_NAME}"
            }
          }
				}
      }
    }

    stage('Provision server on AWS') {
      environment {
        AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
        AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        // TF_VAR_env_prefix = 'prod'
      }

      steps {
        script {
          dir ('terraform_learning/aws_jenkins') {
            sh "terraform init"
            EC2_STATUS = sh(
              script: "terraform apply -auto-approve",
              returnStdout: true
              ).trim()

            EC2_PUBLIC_IP = sh(
              script: "terraform output ec2_public_ip",
              returnStdout: true
              ).trim()

          }
        }
      }
    }

		stage('Deploy to EC2') {
			steps {
				script {
					dir ('terraform_learning/aws_jenkins') {
            echo "Waiting for EC2 server to initialize"

            def hasMatch = (EC2_STATUS =~ /(.*)Resources: 0 added, 0 changed, 0 destroyed(.*)/)

            if (!hasMatch) {
              hasMatch = null
              sleep(time: 90, unit: "SECONDS")
              }

            hasMatch = null

            def shellCmd = "bash ./server-cmds.sh ${IMAGE_NAME}"
				    def ec2Instance = "ec2-user@${EC2_PUBLIC_IP}"

				    sshagent(['my-ssh-key']) {
				      sh "scp -o StrictHostKeyChecking=no server-cmds.sh ${ec2Instance}:/home/ec2-user"
				      sh "scp -o StrictHostKeyChecking=no docker-compose.yaml ${ec2Instance}:/home/ec2-user"
							sh "ssh -o StrictHostKeyChecking=no ${ec2Instance} ${shellCmd}"
				    }

            echo "APP IS READY AT: http://${EC2_PUBLIC_IP}:3000"
          }
			  }
			}
	  }
	}
}
